//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     ANTLR Version: 4.13.1
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// Generated from /home/grisza/race-lang-compiler/RaceLang.g4 by ANTLR 4.13.1

// Unreachable code detected
#pragma warning disable 0162
// The variable '...' is assigned but its value is never used
#pragma warning disable 0219
// Missing XML comment for publicly visible type or member '...'
#pragma warning disable 1591
// Ambiguous reference in cref attribute
#pragma warning disable 419

using System;
using System.IO;
using System.Text;
using System.Diagnostics;
using System.Collections.Generic;
using Antlr4.Runtime;
using Antlr4.Runtime.Atn;
using Antlr4.Runtime.Misc;
using Antlr4.Runtime.Tree;
using DFA = Antlr4.Runtime.Dfa.DFA;

[System.CodeDom.Compiler.GeneratedCode("ANTLR", "4.13.1")]
[System.CLSCompliant(false)]
public partial class RaceLangParser : Parser {
	protected static DFA[] decisionToDFA;
	protected static PredictionContextCache sharedContextCache = new PredictionContextCache();
	public const int
		T__0=1, T__1=2, T__2=3, T__3=4, T__4=5, T__5=6, T__6=7, T__7=8, T__8=9, 
		T__9=10, T__10=11, T__11=12, T__12=13, T__13=14, T__14=15, T__15=16, T__16=17, 
		T__17=18, T__18=19, T__19=20, T__20=21, T__21=22, T__22=23, T__23=24, 
		T__24=25, T__25=26, T__26=27, T__27=28, T__28=29, T__29=30, T__30=31, 
		T__31=32, T__32=33, T__33=34, T__34=35, T__35=36, T__36=37, STRUCT=38, 
		CAR=39, ENGINE=40, TRACK=41, RACE=42, FN=43, LET=44, MUT=45, RETURN=46, 
		IF=47, ELSE=48, FOR=49, IN=50, PARALLEL=51, QUERY=52, IMPORT=53, MODULE=54, 
		SHADER_AT=55, BOOL=56, STRING=57, NUMBER=58, UNIT=59, IDENTIFIER=60, WS=61, 
		COMMENT=62;
	public const int
		RULE_name_token = 0, RULE_program = 1, RULE_module = 2, RULE_import_stmt = 3, 
		RULE_top_level = 4, RULE_top_level_item = 5, RULE_struct_decl = 6, RULE_field_decl = 7, 
		RULE_type = 8, RULE_system_decl = 9, RULE_param_list = 10, RULE_param = 11, 
		RULE_component_list = 12, RULE_car_instance = 13, RULE_engine_instance = 14, 
		RULE_track_instance = 15, RULE_race_instance = 16, RULE_field_value = 17, 
		RULE_function_decl = 18, RULE_block = 19, RULE_statement = 20, RULE_var_decl_stmt = 21, 
		RULE_lvalue = 22, RULE_assignment = 23, RULE_if_stmt = 24, RULE_for_stmt = 25, 
		RULE_expression_stmt = 26, RULE_return_stmt = 27, RULE_expression = 28, 
		RULE_expr1 = 29, RULE_expr2 = 30, RULE_expr3 = 31, RULE_expr4 = 32, RULE_postfix_expr = 33, 
		RULE_postfix_op = 34, RULE_arg_list = 35, RULE_primary_expr = 36, RULE_literal = 37, 
		RULE_array_expr = 38, RULE_struct_init = 39, RULE_init_field = 40, RULE_shader_decl = 41, 
		RULE_shader_type = 42;
	public static readonly string[] ruleNames = {
		"name_token", "program", "module", "import_stmt", "top_level", "top_level_item", 
		"struct_decl", "field_decl", "type", "system_decl", "param_list", "param", 
		"component_list", "car_instance", "engine_instance", "track_instance", 
		"race_instance", "field_value", "function_decl", "block", "statement", 
		"var_decl_stmt", "lvalue", "assignment", "if_stmt", "for_stmt", "expression_stmt", 
		"return_stmt", "expression", "expr1", "expr2", "expr3", "expr4", "postfix_expr", 
		"postfix_op", "arg_list", "primary_expr", "literal", "array_expr", "struct_init", 
		"init_field", "shader_decl", "shader_type"
	};

	private static readonly string[] _LiteralNames = {
		null, "';'", "'{'", "'}'", "':'", "'i32'", "'f32'", "'vec2'", "'vec3'", 
		"'vec4'", "'quat'", "'system'", "'('", "')'", "','", "'->'", "'='", "'.'", 
		"'+='", "'-='", "'*='", "'/='", "'*'", "'/'", "'+'", "'-'", "'=='", "'!='", 
		"'<'", "'>'", "'<='", "'>='", "'!'", "'['", "']'", "'vertex'", "'fragment'", 
		"'compute'", "'struct'", "'car'", "'engine'", "'track'", "'race'", "'fn'", 
		"'let'", "'mut'", "'return'", "'if'", "'else'", "'for'", "'in'", "'parallel'", 
		"'query'", "'import'", "'module'", "'@shader'"
	};
	private static readonly string[] _SymbolicNames = {
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, null, null, null, null, null, null, null, null, null, null, 
		null, null, "STRUCT", "CAR", "ENGINE", "TRACK", "RACE", "FN", "LET", "MUT", 
		"RETURN", "IF", "ELSE", "FOR", "IN", "PARALLEL", "QUERY", "IMPORT", "MODULE", 
		"SHADER_AT", "BOOL", "STRING", "NUMBER", "UNIT", "IDENTIFIER", "WS", "COMMENT"
	};
	public static readonly IVocabulary DefaultVocabulary = new Vocabulary(_LiteralNames, _SymbolicNames);

	[NotNull]
	public override IVocabulary Vocabulary
	{
		get
		{
			return DefaultVocabulary;
		}
	}

	public override string GrammarFileName { get { return "RaceLang.g4"; } }

	public override string[] RuleNames { get { return ruleNames; } }

	public override int[] SerializedAtn { get { return _serializedATN; } }

	static RaceLangParser() {
		decisionToDFA = new DFA[_ATN.NumberOfDecisions];
		for (int i = 0; i < _ATN.NumberOfDecisions; i++) {
			decisionToDFA[i] = new DFA(_ATN.GetDecisionState(i), i);
		}
	}

		public RaceLangParser(ITokenStream input) : this(input, Console.Out, Console.Error) { }

		public RaceLangParser(ITokenStream input, TextWriter output, TextWriter errorOutput)
		: base(input, output, errorOutput)
	{
		Interpreter = new ParserATNSimulator(this, _ATN, decisionToDFA, sharedContextCache);
	}

	public partial class Name_tokenContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(RaceLangParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE() { return GetToken(RaceLangParser.ENGINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAR() { return GetToken(RaceLangParser.CAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRACK() { return GetToken(RaceLangParser.TRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RACE() { return GetToken(RaceLangParser.RACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(RaceLangParser.STRUCT, 0); }
		public Name_tokenContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_name_token; } }
	}

	[RuleVersion(0)]
	public Name_tokenContext name_token() {
		Name_tokenContext _localctx = new Name_tokenContext(Context, State);
		EnterRule(_localctx, 0, RULE_name_token);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 86;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1152930025821962240L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ProgramContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode Eof() { return GetToken(RaceLangParser.Eof, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ModuleContext[] module() {
			return GetRuleContexts<ModuleContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ModuleContext module(int i) {
			return GetRuleContext<ModuleContext>(i);
		}
		public ProgramContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_program; } }
	}

	[RuleVersion(0)]
	public ProgramContext program() {
		ProgramContext _localctx = new ProgramContext(Context, State);
		EnterRule(_localctx, 2, RULE_program);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 91;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==MODULE) {
				{
				{
				State = 88;
				module();
				}
				}
				State = 93;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 94;
			Match(Eof);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ModuleContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MODULE() { return GetToken(RaceLangParser.MODULE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(RaceLangParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Import_stmtContext[] import_stmt() {
			return GetRuleContexts<Import_stmtContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Import_stmtContext import_stmt(int i) {
			return GetRuleContext<Import_stmtContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_levelContext[] top_level() {
			return GetRuleContexts<Top_levelContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_levelContext top_level(int i) {
			return GetRuleContext<Top_levelContext>(i);
		}
		public ModuleContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_module; } }
	}

	[RuleVersion(0)]
	public ModuleContext module() {
		ModuleContext _localctx = new ModuleContext(Context, State);
		EnterRule(_localctx, 4, RULE_module);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 96;
			Match(MODULE);
			State = 97;
			Match(IDENTIFIER);
			State = 101;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==IMPORT) {
				{
				{
				State = 98;
				import_stmt();
				}
				}
				State = 103;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 105;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			do {
				{
				{
				State = 104;
				top_level();
				}
				}
				State = 107;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			} while ( (((_la) & ~0x3f) == 0 && ((1L << _la) & 17317308139520L) != 0) );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Import_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IMPORT() { return GetToken(RaceLangParser.IMPORT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(RaceLangParser.IDENTIFIER, 0); }
		public Import_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_import_stmt; } }
	}

	[RuleVersion(0)]
	public Import_stmtContext import_stmt() {
		Import_stmtContext _localctx = new Import_stmtContext(Context, State);
		EnterRule(_localctx, 6, RULE_import_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 109;
			Match(IMPORT);
			State = 110;
			Match(IDENTIFIER);
			State = 111;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Top_levelContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_itemContext[] top_level_item() {
			return GetRuleContexts<Top_level_itemContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Top_level_itemContext top_level_item(int i) {
			return GetRuleContext<Top_level_itemContext>(i);
		}
		public Top_levelContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top_level; } }
	}

	[RuleVersion(0)]
	public Top_levelContext top_level() {
		Top_levelContext _localctx = new Top_levelContext(Context, State);
		EnterRule(_localctx, 8, RULE_top_level);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 114;
			ErrorHandler.Sync(this);
			_alt = 1;
			do {
				switch (_alt) {
				case 1:
					{
					{
					State = 113;
					top_level_item();
					}
					}
					break;
				default:
					throw new NoViableAltException(this);
				}
				State = 116;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,3,Context);
			} while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER );
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Top_level_itemContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Struct_declContext struct_decl() {
			return GetRuleContext<Struct_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public System_declContext system_decl() {
			return GetRuleContext<System_declContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Car_instanceContext car_instance() {
			return GetRuleContext<Car_instanceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Track_instanceContext track_instance() {
			return GetRuleContext<Track_instanceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Race_instanceContext race_instance() {
			return GetRuleContext<Race_instanceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Engine_instanceContext engine_instance() {
			return GetRuleContext<Engine_instanceContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_declContext function_decl() {
			return GetRuleContext<Function_declContext>(0);
		}
		public Top_level_itemContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_top_level_item; } }
	}

	[RuleVersion(0)]
	public Top_level_itemContext top_level_item() {
		Top_level_itemContext _localctx = new Top_level_itemContext(Context, State);
		EnterRule(_localctx, 10, RULE_top_level_item);
		try {
			State = 125;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case STRUCT:
				EnterOuterAlt(_localctx, 1);
				{
				State = 118;
				struct_decl();
				}
				break;
			case T__10:
				EnterOuterAlt(_localctx, 2);
				{
				State = 119;
				system_decl();
				}
				break;
			case CAR:
				EnterOuterAlt(_localctx, 3);
				{
				State = 120;
				car_instance();
				}
				break;
			case TRACK:
				EnterOuterAlt(_localctx, 4);
				{
				State = 121;
				track_instance();
				}
				break;
			case RACE:
				EnterOuterAlt(_localctx, 5);
				{
				State = 122;
				race_instance();
				}
				break;
			case ENGINE:
				EnterOuterAlt(_localctx, 6);
				{
				State = 123;
				engine_instance();
				}
				break;
			case FN:
				EnterOuterAlt(_localctx, 7);
				{
				State = 124;
				function_decl();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRUCT() { return GetToken(RaceLangParser.STRUCT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(RaceLangParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Field_declContext[] field_decl() {
			return GetRuleContexts<Field_declContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Field_declContext field_decl(int i) {
			return GetRuleContext<Field_declContext>(i);
		}
		public Struct_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_decl; } }
	}

	[RuleVersion(0)]
	public Struct_declContext struct_decl() {
		Struct_declContext _localctx = new Struct_declContext(Context, State);
		EnterRule(_localctx, 12, RULE_struct_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 127;
			Match(STRUCT);
			State = 128;
			Match(IDENTIFIER);
			State = 129;
			Match(T__1);
			State = 133;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1152930025821962240L) != 0)) {
				{
				{
				State = 130;
				field_decl();
				}
				}
				State = 135;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 136;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Field_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Name_tokenContext name_token() {
			return GetRuleContext<Name_tokenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Field_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field_decl; } }
	}

	[RuleVersion(0)]
	public Field_declContext field_decl() {
		Field_declContext _localctx = new Field_declContext(Context, State);
		EnterRule(_localctx, 14, RULE_field_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 138;
			name_token();
			State = 139;
			Match(T__3);
			State = 140;
			type();
			State = 141;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class TypeContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(RaceLangParser.BOOL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(RaceLangParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(RaceLangParser.IDENTIFIER, 0); }
		public TypeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_type; } }
	}

	[RuleVersion(0)]
	public TypeContext type() {
		TypeContext _localctx = new TypeContext(Context, State);
		EnterRule(_localctx, 16, RULE_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 143;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 1369094286720632800L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class System_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(RaceLangParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode QUERY() { return GetToken(RaceLangParser.QUERY, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Param_listContext param_list() {
			return GetRuleContext<Param_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode PARALLEL() { return GetToken(RaceLangParser.PARALLEL, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public System_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_system_decl; } }
	}

	[RuleVersion(0)]
	public System_declContext system_decl() {
		System_declContext _localctx = new System_declContext(Context, State);
		EnterRule(_localctx, 18, RULE_system_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 145;
			Match(T__10);
			State = 146;
			Match(IDENTIFIER);
			State = 147;
			Match(T__11);
			State = 149;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 148;
				param_list();
				}
			}

			State = 151;
			Match(T__12);
			State = 152;
			Match(QUERY);
			State = 153;
			Match(T__1);
			State = 154;
			Match(T__2);
			State = 156;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==PARALLEL) {
				{
				State = 155;
				Match(PARALLEL);
				}
			}

			State = 158;
			Match(T__1);
			State = 162;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1658124845377916928L) != 0)) {
				{
				{
				State = 159;
				statement();
				}
				}
				State = 164;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 165;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Param_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext[] param() {
			return GetRuleContexts<ParamContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ParamContext param(int i) {
			return GetRuleContext<ParamContext>(i);
		}
		public Param_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param_list; } }
	}

	[RuleVersion(0)]
	public Param_listContext param_list() {
		Param_listContext _localctx = new Param_listContext(Context, State);
		EnterRule(_localctx, 20, RULE_param_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 167;
			param();
			State = 172;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__13) {
				{
				{
				State = 168;
				Match(T__13);
				State = 169;
				param();
				}
				}
				State = 174;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ParamContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(RaceLangParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public ParamContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_param; } }
	}

	[RuleVersion(0)]
	public ParamContext param() {
		ParamContext _localctx = new ParamContext(Context, State);
		EnterRule(_localctx, 22, RULE_param);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 175;
			Match(IDENTIFIER);
			State = 176;
			Match(T__3);
			State = 177;
			type();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Component_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode[] IDENTIFIER() { return GetTokens(RaceLangParser.IDENTIFIER); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER(int i) {
			return GetToken(RaceLangParser.IDENTIFIER, i);
		}
		public Component_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_component_list; } }
	}

	[RuleVersion(0)]
	public Component_listContext component_list() {
		Component_listContext _localctx = new Component_listContext(Context, State);
		EnterRule(_localctx, 24, RULE_component_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 179;
			Match(IDENTIFIER);
			State = 184;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__13) {
				{
				{
				State = 180;
				Match(T__13);
				State = 181;
				Match(IDENTIFIER);
				}
				}
				State = 186;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Car_instanceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode CAR() { return GetToken(RaceLangParser.CAR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(RaceLangParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Field_valueContext[] field_value() {
			return GetRuleContexts<Field_valueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Field_valueContext field_value(int i) {
			return GetRuleContext<Field_valueContext>(i);
		}
		public Car_instanceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_car_instance; } }
	}

	[RuleVersion(0)]
	public Car_instanceContext car_instance() {
		Car_instanceContext _localctx = new Car_instanceContext(Context, State);
		EnterRule(_localctx, 26, RULE_car_instance);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 187;
			Match(CAR);
			State = 188;
			Match(IDENTIFIER);
			State = 189;
			Match(T__1);
			State = 193;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1152930025821962240L) != 0)) {
				{
				{
				State = 190;
				field_value();
				}
				}
				State = 195;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 196;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Engine_instanceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ENGINE() { return GetToken(RaceLangParser.ENGINE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(RaceLangParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Field_valueContext[] field_value() {
			return GetRuleContexts<Field_valueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Field_valueContext field_value(int i) {
			return GetRuleContext<Field_valueContext>(i);
		}
		public Engine_instanceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_engine_instance; } }
	}

	[RuleVersion(0)]
	public Engine_instanceContext engine_instance() {
		Engine_instanceContext _localctx = new Engine_instanceContext(Context, State);
		EnterRule(_localctx, 28, RULE_engine_instance);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 198;
			Match(ENGINE);
			State = 199;
			Match(IDENTIFIER);
			State = 200;
			Match(T__1);
			State = 204;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1152930025821962240L) != 0)) {
				{
				{
				State = 201;
				field_value();
				}
				}
				State = 206;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 207;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Track_instanceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode TRACK() { return GetToken(RaceLangParser.TRACK, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(RaceLangParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Field_valueContext[] field_value() {
			return GetRuleContexts<Field_valueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Field_valueContext field_value(int i) {
			return GetRuleContext<Field_valueContext>(i);
		}
		public Track_instanceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_track_instance; } }
	}

	[RuleVersion(0)]
	public Track_instanceContext track_instance() {
		Track_instanceContext _localctx = new Track_instanceContext(Context, State);
		EnterRule(_localctx, 30, RULE_track_instance);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 209;
			Match(TRACK);
			State = 210;
			Match(IDENTIFIER);
			State = 211;
			Match(T__1);
			State = 215;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1152930025821962240L) != 0)) {
				{
				{
				State = 212;
				field_value();
				}
				}
				State = 217;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 218;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Race_instanceContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RACE() { return GetToken(RaceLangParser.RACE, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(RaceLangParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Field_valueContext[] field_value() {
			return GetRuleContexts<Field_valueContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Field_valueContext field_value(int i) {
			return GetRuleContext<Field_valueContext>(i);
		}
		public Race_instanceContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_race_instance; } }
	}

	[RuleVersion(0)]
	public Race_instanceContext race_instance() {
		Race_instanceContext _localctx = new Race_instanceContext(Context, State);
		EnterRule(_localctx, 32, RULE_race_instance);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 220;
			Match(RACE);
			State = 221;
			Match(IDENTIFIER);
			State = 222;
			Match(T__1);
			State = 226;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1152930025821962240L) != 0)) {
				{
				{
				State = 223;
				field_value();
				}
				}
				State = 228;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 229;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Field_valueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Name_tokenContext name_token() {
			return GetRuleContext<Name_tokenContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Field_valueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_field_value; } }
	}

	[RuleVersion(0)]
	public Field_valueContext field_value() {
		Field_valueContext _localctx = new Field_valueContext(Context, State);
		EnterRule(_localctx, 34, RULE_field_value);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 231;
			name_token();
			State = 232;
			Match(T__3);
			State = 233;
			expression();
			State = 234;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Function_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FN() { return GetToken(RaceLangParser.FN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(RaceLangParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Param_listContext param_list() {
			return GetRuleContext<Param_listContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		public Function_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_function_decl; } }
	}

	[RuleVersion(0)]
	public Function_declContext function_decl() {
		Function_declContext _localctx = new Function_declContext(Context, State);
		EnterRule(_localctx, 36, RULE_function_decl);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 236;
			Match(FN);
			State = 237;
			Match(IDENTIFIER);
			State = 238;
			Match(T__11);
			State = 240;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 239;
				param_list();
				}
			}

			State = 242;
			Match(T__12);
			State = 245;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__14) {
				{
				State = 243;
				Match(T__14);
				State = 244;
				type();
				}
			}

			State = 247;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class BlockContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext[] statement() {
			return GetRuleContexts<StatementContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public StatementContext statement(int i) {
			return GetRuleContext<StatementContext>(i);
		}
		public BlockContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_block; } }
	}

	[RuleVersion(0)]
	public BlockContext block() {
		BlockContext _localctx = new BlockContext(Context, State);
		EnterRule(_localctx, 38, RULE_block);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 249;
			Match(T__1);
			State = 253;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1658124845377916928L) != 0)) {
				{
				{
				State = 250;
				statement();
				}
				}
				State = 255;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			State = 256;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class StatementContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Var_decl_stmtContext var_decl_stmt() {
			return GetRuleContext<Var_decl_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public AssignmentContext assignment() {
			return GetRuleContext<AssignmentContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public If_stmtContext if_stmt() {
			return GetRuleContext<If_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public For_stmtContext for_stmt() {
			return GetRuleContext<For_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expression_stmtContext expression_stmt() {
			return GetRuleContext<Expression_stmtContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Return_stmtContext return_stmt() {
			return GetRuleContext<Return_stmtContext>(0);
		}
		public StatementContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_statement; } }
	}

	[RuleVersion(0)]
	public StatementContext statement() {
		StatementContext _localctx = new StatementContext(Context, State);
		EnterRule(_localctx, 40, RULE_statement);
		try {
			State = 264;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,18,Context) ) {
			case 1:
				EnterOuterAlt(_localctx, 1);
				{
				State = 258;
				var_decl_stmt();
				}
				break;
			case 2:
				EnterOuterAlt(_localctx, 2);
				{
				State = 259;
				assignment();
				}
				break;
			case 3:
				EnterOuterAlt(_localctx, 3);
				{
				State = 260;
				if_stmt();
				}
				break;
			case 4:
				EnterOuterAlt(_localctx, 4);
				{
				State = 261;
				for_stmt();
				}
				break;
			case 5:
				EnterOuterAlt(_localctx, 5);
				{
				State = 262;
				expression_stmt();
				}
				break;
			case 6:
				EnterOuterAlt(_localctx, 6);
				{
				State = 263;
				return_stmt();
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Var_decl_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode LET() { return GetToken(RaceLangParser.LET, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(RaceLangParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public TypeContext type() {
			return GetRuleContext<TypeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode MUT() { return GetToken(RaceLangParser.MUT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Var_decl_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_var_decl_stmt; } }
	}

	[RuleVersion(0)]
	public Var_decl_stmtContext var_decl_stmt() {
		Var_decl_stmtContext _localctx = new Var_decl_stmtContext(Context, State);
		EnterRule(_localctx, 42, RULE_var_decl_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 266;
			Match(LET);
			State = 268;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==MUT) {
				{
				State = 267;
				Match(MUT);
				}
			}

			State = 270;
			Match(IDENTIFIER);
			State = 271;
			Match(T__3);
			State = 272;
			type();
			State = 275;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==T__15) {
				{
				State = 273;
				Match(T__15);
				State = 274;
				expression();
				}
			}

			State = 277;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LvalueContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Name_tokenContext[] name_token() {
			return GetRuleContexts<Name_tokenContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Name_tokenContext name_token(int i) {
			return GetRuleContext<Name_tokenContext>(i);
		}
		public LvalueContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_lvalue; } }
	}

	[RuleVersion(0)]
	public LvalueContext lvalue() {
		LvalueContext _localctx = new LvalueContext(Context, State);
		EnterRule(_localctx, 44, RULE_lvalue);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 279;
			name_token();
			State = 284;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__16) {
				{
				{
				State = 280;
				Match(T__16);
				State = 281;
				name_token();
				}
				}
				State = 286;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class AssignmentContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public LvalueContext lvalue() {
			return GetRuleContext<LvalueContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public AssignmentContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_assignment; } }
	}

	[RuleVersion(0)]
	public AssignmentContext assignment() {
		AssignmentContext _localctx = new AssignmentContext(Context, State);
		EnterRule(_localctx, 46, RULE_assignment);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 287;
			lvalue();
			State = 288;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 3997696L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			State = 289;
			expression();
			State = 290;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class If_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IF() { return GetToken(RaceLangParser.IF, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext[] block() {
			return GetRuleContexts<BlockContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block(int i) {
			return GetRuleContext<BlockContext>(i);
		}
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode ELSE() { return GetToken(RaceLangParser.ELSE, 0); }
		public If_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_if_stmt; } }
	}

	[RuleVersion(0)]
	public If_stmtContext if_stmt() {
		If_stmtContext _localctx = new If_stmtContext(Context, State);
		EnterRule(_localctx, 48, RULE_if_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 292;
			Match(IF);
			State = 293;
			Match(T__11);
			State = 294;
			expression();
			State = 295;
			Match(T__12);
			State = 296;
			block();
			State = 299;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==ELSE) {
				{
				State = 297;
				Match(ELSE);
				State = 298;
				block();
				}
			}

			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class For_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode FOR() { return GetToken(RaceLangParser.FOR, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(RaceLangParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IN() { return GetToken(RaceLangParser.IN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public BlockContext block() {
			return GetRuleContext<BlockContext>(0);
		}
		public For_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_for_stmt; } }
	}

	[RuleVersion(0)]
	public For_stmtContext for_stmt() {
		For_stmtContext _localctx = new For_stmtContext(Context, State);
		EnterRule(_localctx, 50, RULE_for_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 301;
			Match(FOR);
			State = 302;
			Match(IDENTIFIER);
			State = 303;
			Match(IN);
			State = 304;
			expression();
			State = 305;
			block();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expression_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Expression_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression_stmt; } }
	}

	[RuleVersion(0)]
	public Expression_stmtContext expression_stmt() {
		Expression_stmtContext _localctx = new Expression_stmtContext(Context, State);
		EnterRule(_localctx, 52, RULE_expression_stmt);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 307;
			expression();
			State = 308;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Return_stmtContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode RETURN() { return GetToken(RaceLangParser.RETURN, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Return_stmtContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_return_stmt; } }
	}

	[RuleVersion(0)]
	public Return_stmtContext return_stmt() {
		Return_stmtContext _localctx = new Return_stmtContext(Context, State);
		EnterRule(_localctx, 54, RULE_return_stmt);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 310;
			Match(RETURN);
			State = 312;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1657324675790802944L) != 0)) {
				{
				State = 311;
				expression();
				}
			}

			State = 314;
			Match(T__0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class ExpressionContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Expr1Context expr1() {
			return GetRuleContext<Expr1Context>(0);
		}
		public ExpressionContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expression; } }
	}

	[RuleVersion(0)]
	public ExpressionContext expression() {
		ExpressionContext _localctx = new ExpressionContext(Context, State);
		EnterRule(_localctx, 56, RULE_expression);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 316;
			expr1(0);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Expr1Context : ParserRuleContext {
		public Expr1Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr1; } }
	 
		public Expr1Context() { }
		public virtual void CopyFrom(Expr1Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class MulDivExprContext : Expr1Context {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public Expr1Context expr1() {
			return GetRuleContext<Expr1Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr2Context expr2() {
			return GetRuleContext<Expr2Context>(0);
		}
		public MulDivExprContext(Expr1Context context) { CopyFrom(context); }
	}
	public partial class PassUp1Context : Expr1Context {
		[System.Diagnostics.DebuggerNonUserCode] public Expr2Context expr2() {
			return GetRuleContext<Expr2Context>(0);
		}
		public PassUp1Context(Expr1Context context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public Expr1Context expr1() {
		return expr1(0);
	}

	private Expr1Context expr1(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Expr1Context _localctx = new Expr1Context(Context, _parentState);
		Expr1Context _prevctx = _localctx;
		int _startState = 58;
		EnterRecursionRule(_localctx, 58, RULE_expr1, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new PassUp1Context(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 319;
			expr2(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 326;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new MulDivExprContext(new Expr1Context(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_expr1);
					State = 321;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 322;
					((MulDivExprContext)_localctx).op = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==T__21 || _la==T__22) ) {
						((MulDivExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 323;
					expr2(0);
					}
					} 
				}
				State = 328;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,24,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Expr2Context : ParserRuleContext {
		public Expr2Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr2; } }
	 
		public Expr2Context() { }
		public virtual void CopyFrom(Expr2Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class PassUp2Context : Expr2Context {
		[System.Diagnostics.DebuggerNonUserCode] public Expr3Context expr3() {
			return GetRuleContext<Expr3Context>(0);
		}
		public PassUp2Context(Expr2Context context) { CopyFrom(context); }
	}
	public partial class AddSubExprContext : Expr2Context {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public Expr2Context expr2() {
			return GetRuleContext<Expr2Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr3Context expr3() {
			return GetRuleContext<Expr3Context>(0);
		}
		public AddSubExprContext(Expr2Context context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public Expr2Context expr2() {
		return expr2(0);
	}

	private Expr2Context expr2(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Expr2Context _localctx = new Expr2Context(Context, _parentState);
		Expr2Context _prevctx = _localctx;
		int _startState = 60;
		EnterRecursionRule(_localctx, 60, RULE_expr2, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new PassUp2Context(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 330;
			expr3(0);
			}
			Context.Stop = TokenStream.LT(-1);
			State = 337;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new AddSubExprContext(new Expr2Context(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_expr2);
					State = 332;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 333;
					((AddSubExprContext)_localctx).op = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !(_la==T__23 || _la==T__24) ) {
						((AddSubExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 334;
					expr3(0);
					}
					} 
				}
				State = 339;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,25,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Expr3Context : ParserRuleContext {
		public Expr3Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr3; } }
	 
		public Expr3Context() { }
		public virtual void CopyFrom(Expr3Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class PassUp3Context : Expr3Context {
		[System.Diagnostics.DebuggerNonUserCode] public Expr4Context expr4() {
			return GetRuleContext<Expr4Context>(0);
		}
		public PassUp3Context(Expr3Context context) { CopyFrom(context); }
	}
	public partial class CompareExprContext : Expr3Context {
		public IToken op;
		[System.Diagnostics.DebuggerNonUserCode] public Expr3Context expr3() {
			return GetRuleContext<Expr3Context>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Expr4Context expr4() {
			return GetRuleContext<Expr4Context>(0);
		}
		public CompareExprContext(Expr3Context context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public Expr3Context expr3() {
		return expr3(0);
	}

	private Expr3Context expr3(int _p) {
		ParserRuleContext _parentctx = Context;
		int _parentState = State;
		Expr3Context _localctx = new Expr3Context(Context, _parentState);
		Expr3Context _prevctx = _localctx;
		int _startState = 62;
		EnterRecursionRule(_localctx, 62, RULE_expr3, _p);
		int _la;
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			{
			_localctx = new PassUp3Context(_localctx);
			Context = _localctx;
			_prevctx = _localctx;

			State = 341;
			expr4();
			}
			Context.Stop = TokenStream.LT(-1);
			State = 348;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					if ( ParseListeners!=null )
						TriggerExitRuleEvent();
					_prevctx = _localctx;
					{
					{
					_localctx = new CompareExprContext(new Expr3Context(_parentctx, _parentState));
					PushNewRecursionContext(_localctx, _startState, RULE_expr3);
					State = 343;
					if (!(Precpred(Context, 2))) throw new FailedPredicateException(this, "Precpred(Context, 2)");
					State = 344;
					((CompareExprContext)_localctx).op = TokenStream.LT(1);
					_la = TokenStream.LA(1);
					if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 4227858432L) != 0)) ) {
						((CompareExprContext)_localctx).op = ErrorHandler.RecoverInline(this);
					}
					else {
						ErrorHandler.ReportMatch(this);
					    Consume();
					}
					State = 345;
					expr4();
					}
					} 
				}
				State = 350;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,26,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			UnrollRecursionContexts(_parentctx);
		}
		return _localctx;
	}

	public partial class Expr4Context : ParserRuleContext {
		public Expr4Context(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_expr4; } }
	 
		public Expr4Context() { }
		public virtual void CopyFrom(Expr4Context context) {
			base.CopyFrom(context);
		}
	}
	public partial class PostfixExprContext : Expr4Context {
		[System.Diagnostics.DebuggerNonUserCode] public Postfix_exprContext postfix_expr() {
			return GetRuleContext<Postfix_exprContext>(0);
		}
		public PostfixExprContext(Expr4Context context) { CopyFrom(context); }
	}
	public partial class UnaryNotExprContext : Expr4Context {
		[System.Diagnostics.DebuggerNonUserCode] public Expr4Context expr4() {
			return GetRuleContext<Expr4Context>(0);
		}
		public UnaryNotExprContext(Expr4Context context) { CopyFrom(context); }
	}
	public partial class UnaryMinusExprContext : Expr4Context {
		[System.Diagnostics.DebuggerNonUserCode] public Expr4Context expr4() {
			return GetRuleContext<Expr4Context>(0);
		}
		public UnaryMinusExprContext(Expr4Context context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public Expr4Context expr4() {
		Expr4Context _localctx = new Expr4Context(Context, State);
		EnterRule(_localctx, 64, RULE_expr4);
		try {
			State = 356;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__24:
				_localctx = new UnaryMinusExprContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 351;
				Match(T__24);
				State = 352;
				expr4();
				}
				break;
			case T__31:
				_localctx = new UnaryNotExprContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 353;
				Match(T__31);
				State = 354;
				expr4();
				}
				break;
			case T__11:
			case T__32:
			case BOOL:
			case STRING:
			case NUMBER:
			case IDENTIFIER:
				_localctx = new PostfixExprContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 355;
				postfix_expr();
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Postfix_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public Primary_exprContext primary_expr() {
			return GetRuleContext<Primary_exprContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Postfix_opContext[] postfix_op() {
			return GetRuleContexts<Postfix_opContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Postfix_opContext postfix_op(int i) {
			return GetRuleContext<Postfix_opContext>(i);
		}
		public Postfix_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfix_expr; } }
	}

	[RuleVersion(0)]
	public Postfix_exprContext postfix_expr() {
		Postfix_exprContext _localctx = new Postfix_exprContext(Context, State);
		EnterRule(_localctx, 66, RULE_postfix_expr);
		try {
			int _alt;
			EnterOuterAlt(_localctx, 1);
			{
			State = 358;
			primary_expr();
			State = 362;
			ErrorHandler.Sync(this);
			_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			while ( _alt!=2 && _alt!=global::Antlr4.Runtime.Atn.ATN.INVALID_ALT_NUMBER ) {
				if ( _alt==1 ) {
					{
					{
					State = 359;
					postfix_op();
					}
					} 
				}
				State = 364;
				ErrorHandler.Sync(this);
				_alt = Interpreter.AdaptivePredict(TokenStream,28,Context);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Postfix_opContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(RaceLangParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Arg_listContext arg_list() {
			return GetRuleContext<Arg_listContext>(0);
		}
		public Postfix_opContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_postfix_op; } }
	}

	[RuleVersion(0)]
	public Postfix_opContext postfix_op() {
		Postfix_opContext _localctx = new Postfix_opContext(Context, State);
		EnterRule(_localctx, 68, RULE_postfix_op);
		int _la;
		try {
			State = 372;
			ErrorHandler.Sync(this);
			switch (TokenStream.LA(1)) {
			case T__16:
				EnterOuterAlt(_localctx, 1);
				{
				State = 365;
				Match(T__16);
				State = 366;
				Match(IDENTIFIER);
				}
				break;
			case T__11:
				EnterOuterAlt(_localctx, 2);
				{
				State = 367;
				Match(T__11);
				State = 369;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1657324675790802944L) != 0)) {
					{
					State = 368;
					arg_list();
					}
				}

				State = 371;
				Match(T__12);
				}
				break;
			default:
				throw new NoViableAltException(this);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Arg_listContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Arg_listContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_arg_list; } }
	}

	[RuleVersion(0)]
	public Arg_listContext arg_list() {
		Arg_listContext _localctx = new Arg_listContext(Context, State);
		EnterRule(_localctx, 70, RULE_arg_list);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 374;
			expression();
			State = 379;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			while (_la==T__13) {
				{
				{
				State = 375;
				Match(T__13);
				State = 376;
				expression();
				}
				}
				State = 381;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Primary_exprContext : ParserRuleContext {
		public Primary_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_primary_expr; } }
	 
		public Primary_exprContext() { }
		public virtual void CopyFrom(Primary_exprContext context) {
			base.CopyFrom(context);
		}
	}
	public partial class ArrayExprContext : Primary_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public Array_exprContext array_expr() {
			return GetRuleContext<Array_exprContext>(0);
		}
		public ArrayExprContext(Primary_exprContext context) { CopyFrom(context); }
	}
	public partial class StructInitContext : Primary_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public Struct_initContext struct_init() {
			return GetRuleContext<Struct_initContext>(0);
		}
		public StructInitContext(Primary_exprContext context) { CopyFrom(context); }
	}
	public partial class IdExprContext : Primary_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(RaceLangParser.IDENTIFIER, 0); }
		public IdExprContext(Primary_exprContext context) { CopyFrom(context); }
	}
	public partial class LiteralExprContext : Primary_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public LiteralContext literal() {
			return GetRuleContext<LiteralContext>(0);
		}
		public LiteralExprContext(Primary_exprContext context) { CopyFrom(context); }
	}
	public partial class ParenExprContext : Primary_exprContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public ParenExprContext(Primary_exprContext context) { CopyFrom(context); }
	}

	[RuleVersion(0)]
	public Primary_exprContext primary_expr() {
		Primary_exprContext _localctx = new Primary_exprContext(Context, State);
		EnterRule(_localctx, 72, RULE_primary_expr);
		try {
			State = 390;
			ErrorHandler.Sync(this);
			switch ( Interpreter.AdaptivePredict(TokenStream,32,Context) ) {
			case 1:
				_localctx = new LiteralExprContext(_localctx);
				EnterOuterAlt(_localctx, 1);
				{
				State = 382;
				literal();
				}
				break;
			case 2:
				_localctx = new IdExprContext(_localctx);
				EnterOuterAlt(_localctx, 2);
				{
				State = 383;
				Match(IDENTIFIER);
				}
				break;
			case 3:
				_localctx = new ArrayExprContext(_localctx);
				EnterOuterAlt(_localctx, 3);
				{
				State = 384;
				array_expr();
				}
				break;
			case 4:
				_localctx = new StructInitContext(_localctx);
				EnterOuterAlt(_localctx, 4);
				{
				State = 385;
				struct_init();
				}
				break;
			case 5:
				_localctx = new ParenExprContext(_localctx);
				EnterOuterAlt(_localctx, 5);
				{
				State = 386;
				Match(T__11);
				State = 387;
				expression();
				State = 388;
				Match(T__12);
				}
				break;
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class LiteralContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode NUMBER() { return GetToken(RaceLangParser.NUMBER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode STRING() { return GetToken(RaceLangParser.STRING, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode BOOL() { return GetToken(RaceLangParser.BOOL, 0); }
		public LiteralContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_literal; } }
	}

	[RuleVersion(0)]
	public LiteralContext literal() {
		LiteralContext _localctx = new LiteralContext(Context, State);
		EnterRule(_localctx, 74, RULE_literal);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 392;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 504403158265495552L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Array_exprContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext[] expression() {
			return GetRuleContexts<ExpressionContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression(int i) {
			return GetRuleContext<ExpressionContext>(i);
		}
		public Array_exprContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_array_expr; } }
	}

	[RuleVersion(0)]
	public Array_exprContext array_expr() {
		Array_exprContext _localctx = new Array_exprContext(Context, State);
		EnterRule(_localctx, 76, RULE_array_expr);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 394;
			Match(T__32);
			State = 403;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if ((((_la) & ~0x3f) == 0 && ((1L << _la) & 1657324675790802944L) != 0)) {
				{
				State = 395;
				expression();
				State = 400;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__13) {
					{
					{
					State = 396;
					Match(T__13);
					State = 397;
					expression();
					}
					}
					State = 402;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 405;
			Match(T__33);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Struct_initContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(RaceLangParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Init_fieldContext[] init_field() {
			return GetRuleContexts<Init_fieldContext>();
		}
		[System.Diagnostics.DebuggerNonUserCode] public Init_fieldContext init_field(int i) {
			return GetRuleContext<Init_fieldContext>(i);
		}
		public Struct_initContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_struct_init; } }
	}

	[RuleVersion(0)]
	public Struct_initContext struct_init() {
		Struct_initContext _localctx = new Struct_initContext(Context, State);
		EnterRule(_localctx, 78, RULE_struct_init);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 407;
			Match(IDENTIFIER);
			State = 408;
			Match(T__1);
			State = 417;
			ErrorHandler.Sync(this);
			_la = TokenStream.LA(1);
			if (_la==IDENTIFIER) {
				{
				State = 409;
				init_field();
				State = 414;
				ErrorHandler.Sync(this);
				_la = TokenStream.LA(1);
				while (_la==T__13) {
					{
					{
					State = 410;
					Match(T__13);
					State = 411;
					init_field();
					}
					}
					State = 416;
					ErrorHandler.Sync(this);
					_la = TokenStream.LA(1);
				}
				}
			}

			State = 419;
			Match(T__2);
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Init_fieldContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode IDENTIFIER() { return GetToken(RaceLangParser.IDENTIFIER, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public ExpressionContext expression() {
			return GetRuleContext<ExpressionContext>(0);
		}
		public Init_fieldContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_init_field; } }
	}

	[RuleVersion(0)]
	public Init_fieldContext init_field() {
		Init_fieldContext _localctx = new Init_fieldContext(Context, State);
		EnterRule(_localctx, 80, RULE_init_field);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 421;
			Match(IDENTIFIER);
			State = 422;
			Match(T__3);
			State = 423;
			expression();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Shader_declContext : ParserRuleContext {
		[System.Diagnostics.DebuggerNonUserCode] public ITerminalNode SHADER_AT() { return GetToken(RaceLangParser.SHADER_AT, 0); }
		[System.Diagnostics.DebuggerNonUserCode] public Shader_typeContext shader_type() {
			return GetRuleContext<Shader_typeContext>(0);
		}
		[System.Diagnostics.DebuggerNonUserCode] public Function_declContext function_decl() {
			return GetRuleContext<Function_declContext>(0);
		}
		public Shader_declContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shader_decl; } }
	}

	[RuleVersion(0)]
	public Shader_declContext shader_decl() {
		Shader_declContext _localctx = new Shader_declContext(Context, State);
		EnterRule(_localctx, 82, RULE_shader_decl);
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 425;
			Match(SHADER_AT);
			State = 426;
			Match(T__11);
			State = 427;
			shader_type();
			State = 428;
			Match(T__12);
			State = 429;
			function_decl();
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public partial class Shader_typeContext : ParserRuleContext {
		public Shader_typeContext(ParserRuleContext parent, int invokingState)
			: base(parent, invokingState)
		{
		}
		public override int RuleIndex { get { return RULE_shader_type; } }
	}

	[RuleVersion(0)]
	public Shader_typeContext shader_type() {
		Shader_typeContext _localctx = new Shader_typeContext(Context, State);
		EnterRule(_localctx, 84, RULE_shader_type);
		int _la;
		try {
			EnterOuterAlt(_localctx, 1);
			{
			State = 431;
			_la = TokenStream.LA(1);
			if ( !((((_la) & ~0x3f) == 0 && ((1L << _la) & 240518168576L) != 0)) ) {
			ErrorHandler.RecoverInline(this);
			}
			else {
				ErrorHandler.ReportMatch(this);
			    Consume();
			}
			}
		}
		catch (RecognitionException re) {
			_localctx.exception = re;
			ErrorHandler.ReportError(this, re);
			ErrorHandler.Recover(this, re);
		}
		finally {
			ExitRule();
		}
		return _localctx;
	}

	public override bool Sempred(RuleContext _localctx, int ruleIndex, int predIndex) {
		switch (ruleIndex) {
		case 29: return expr1_sempred((Expr1Context)_localctx, predIndex);
		case 30: return expr2_sempred((Expr2Context)_localctx, predIndex);
		case 31: return expr3_sempred((Expr3Context)_localctx, predIndex);
		}
		return true;
	}
	private bool expr1_sempred(Expr1Context _localctx, int predIndex) {
		switch (predIndex) {
		case 0: return Precpred(Context, 2);
		}
		return true;
	}
	private bool expr2_sempred(Expr2Context _localctx, int predIndex) {
		switch (predIndex) {
		case 1: return Precpred(Context, 2);
		}
		return true;
	}
	private bool expr3_sempred(Expr3Context _localctx, int predIndex) {
		switch (predIndex) {
		case 2: return Precpred(Context, 2);
		}
		return true;
	}

	private static int[] _serializedATN = {
		4,1,62,434,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,
		7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,
		2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,
		2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,
		2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,
		2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,
		1,0,1,0,1,1,5,1,90,8,1,10,1,12,1,93,9,1,1,1,1,1,1,2,1,2,1,2,5,2,100,8,
		2,10,2,12,2,103,9,2,1,2,4,2,106,8,2,11,2,12,2,107,1,3,1,3,1,3,1,3,1,4,
		4,4,115,8,4,11,4,12,4,116,1,5,1,5,1,5,1,5,1,5,1,5,1,5,3,5,126,8,5,1,6,
		1,6,1,6,1,6,5,6,132,8,6,10,6,12,6,135,9,6,1,6,1,6,1,7,1,7,1,7,1,7,1,7,
		1,8,1,8,1,9,1,9,1,9,1,9,3,9,150,8,9,1,9,1,9,1,9,1,9,1,9,3,9,157,8,9,1,
		9,1,9,5,9,161,8,9,10,9,12,9,164,9,9,1,9,1,9,1,10,1,10,1,10,5,10,171,8,
		10,10,10,12,10,174,9,10,1,11,1,11,1,11,1,11,1,12,1,12,1,12,5,12,183,8,
		12,10,12,12,12,186,9,12,1,13,1,13,1,13,1,13,5,13,192,8,13,10,13,12,13,
		195,9,13,1,13,1,13,1,14,1,14,1,14,1,14,5,14,203,8,14,10,14,12,14,206,9,
		14,1,14,1,14,1,15,1,15,1,15,1,15,5,15,214,8,15,10,15,12,15,217,9,15,1,
		15,1,15,1,16,1,16,1,16,1,16,5,16,225,8,16,10,16,12,16,228,9,16,1,16,1,
		16,1,17,1,17,1,17,1,17,1,17,1,18,1,18,1,18,1,18,3,18,241,8,18,1,18,1,18,
		1,18,3,18,246,8,18,1,18,1,18,1,19,1,19,5,19,252,8,19,10,19,12,19,255,9,
		19,1,19,1,19,1,20,1,20,1,20,1,20,1,20,1,20,3,20,265,8,20,1,21,1,21,3,21,
		269,8,21,1,21,1,21,1,21,1,21,1,21,3,21,276,8,21,1,21,1,21,1,22,1,22,1,
		22,5,22,283,8,22,10,22,12,22,286,9,22,1,23,1,23,1,23,1,23,1,23,1,24,1,
		24,1,24,1,24,1,24,1,24,1,24,3,24,300,8,24,1,25,1,25,1,25,1,25,1,25,1,25,
		1,26,1,26,1,26,1,27,1,27,3,27,313,8,27,1,27,1,27,1,28,1,28,1,29,1,29,1,
		29,1,29,1,29,1,29,5,29,325,8,29,10,29,12,29,328,9,29,1,30,1,30,1,30,1,
		30,1,30,1,30,5,30,336,8,30,10,30,12,30,339,9,30,1,31,1,31,1,31,1,31,1,
		31,1,31,5,31,347,8,31,10,31,12,31,350,9,31,1,32,1,32,1,32,1,32,1,32,3,
		32,357,8,32,1,33,1,33,5,33,361,8,33,10,33,12,33,364,9,33,1,34,1,34,1,34,
		1,34,3,34,370,8,34,1,34,3,34,373,8,34,1,35,1,35,1,35,5,35,378,8,35,10,
		35,12,35,381,9,35,1,36,1,36,1,36,1,36,1,36,1,36,1,36,1,36,3,36,391,8,36,
		1,37,1,37,1,38,1,38,1,38,1,38,5,38,399,8,38,10,38,12,38,402,9,38,3,38,
		404,8,38,1,38,1,38,1,39,1,39,1,39,1,39,1,39,5,39,413,8,39,10,39,12,39,
		416,9,39,3,39,418,8,39,1,39,1,39,1,40,1,40,1,40,1,40,1,41,1,41,1,41,1,
		41,1,41,1,41,1,42,1,42,1,42,0,3,58,60,62,43,0,2,4,6,8,10,12,14,16,18,20,
		22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,58,60,62,64,66,68,
		70,72,74,76,78,80,82,84,0,8,2,0,38,42,60,60,3,0,5,10,56,57,60,60,2,0,16,
		16,18,21,1,0,22,23,1,0,24,25,1,0,26,31,1,0,56,58,1,0,35,37,440,0,86,1,
		0,0,0,2,91,1,0,0,0,4,96,1,0,0,0,6,109,1,0,0,0,8,114,1,0,0,0,10,125,1,0,
		0,0,12,127,1,0,0,0,14,138,1,0,0,0,16,143,1,0,0,0,18,145,1,0,0,0,20,167,
		1,0,0,0,22,175,1,0,0,0,24,179,1,0,0,0,26,187,1,0,0,0,28,198,1,0,0,0,30,
		209,1,0,0,0,32,220,1,0,0,0,34,231,1,0,0,0,36,236,1,0,0,0,38,249,1,0,0,
		0,40,264,1,0,0,0,42,266,1,0,0,0,44,279,1,0,0,0,46,287,1,0,0,0,48,292,1,
		0,0,0,50,301,1,0,0,0,52,307,1,0,0,0,54,310,1,0,0,0,56,316,1,0,0,0,58,318,
		1,0,0,0,60,329,1,0,0,0,62,340,1,0,0,0,64,356,1,0,0,0,66,358,1,0,0,0,68,
		372,1,0,0,0,70,374,1,0,0,0,72,390,1,0,0,0,74,392,1,0,0,0,76,394,1,0,0,
		0,78,407,1,0,0,0,80,421,1,0,0,0,82,425,1,0,0,0,84,431,1,0,0,0,86,87,7,
		0,0,0,87,1,1,0,0,0,88,90,3,4,2,0,89,88,1,0,0,0,90,93,1,0,0,0,91,89,1,0,
		0,0,91,92,1,0,0,0,92,94,1,0,0,0,93,91,1,0,0,0,94,95,5,0,0,1,95,3,1,0,0,
		0,96,97,5,54,0,0,97,101,5,60,0,0,98,100,3,6,3,0,99,98,1,0,0,0,100,103,
		1,0,0,0,101,99,1,0,0,0,101,102,1,0,0,0,102,105,1,0,0,0,103,101,1,0,0,0,
		104,106,3,8,4,0,105,104,1,0,0,0,106,107,1,0,0,0,107,105,1,0,0,0,107,108,
		1,0,0,0,108,5,1,0,0,0,109,110,5,53,0,0,110,111,5,60,0,0,111,112,5,1,0,
		0,112,7,1,0,0,0,113,115,3,10,5,0,114,113,1,0,0,0,115,116,1,0,0,0,116,114,
		1,0,0,0,116,117,1,0,0,0,117,9,1,0,0,0,118,126,3,12,6,0,119,126,3,18,9,
		0,120,126,3,26,13,0,121,126,3,30,15,0,122,126,3,32,16,0,123,126,3,28,14,
		0,124,126,3,36,18,0,125,118,1,0,0,0,125,119,1,0,0,0,125,120,1,0,0,0,125,
		121,1,0,0,0,125,122,1,0,0,0,125,123,1,0,0,0,125,124,1,0,0,0,126,11,1,0,
		0,0,127,128,5,38,0,0,128,129,5,60,0,0,129,133,5,2,0,0,130,132,3,14,7,0,
		131,130,1,0,0,0,132,135,1,0,0,0,133,131,1,0,0,0,133,134,1,0,0,0,134,136,
		1,0,0,0,135,133,1,0,0,0,136,137,5,3,0,0,137,13,1,0,0,0,138,139,3,0,0,0,
		139,140,5,4,0,0,140,141,3,16,8,0,141,142,5,1,0,0,142,15,1,0,0,0,143,144,
		7,1,0,0,144,17,1,0,0,0,145,146,5,11,0,0,146,147,5,60,0,0,147,149,5,12,
		0,0,148,150,3,20,10,0,149,148,1,0,0,0,149,150,1,0,0,0,150,151,1,0,0,0,
		151,152,5,13,0,0,152,153,5,52,0,0,153,154,5,2,0,0,154,156,5,3,0,0,155,
		157,5,51,0,0,156,155,1,0,0,0,156,157,1,0,0,0,157,158,1,0,0,0,158,162,5,
		2,0,0,159,161,3,40,20,0,160,159,1,0,0,0,161,164,1,0,0,0,162,160,1,0,0,
		0,162,163,1,0,0,0,163,165,1,0,0,0,164,162,1,0,0,0,165,166,5,3,0,0,166,
		19,1,0,0,0,167,172,3,22,11,0,168,169,5,14,0,0,169,171,3,22,11,0,170,168,
		1,0,0,0,171,174,1,0,0,0,172,170,1,0,0,0,172,173,1,0,0,0,173,21,1,0,0,0,
		174,172,1,0,0,0,175,176,5,60,0,0,176,177,5,4,0,0,177,178,3,16,8,0,178,
		23,1,0,0,0,179,184,5,60,0,0,180,181,5,14,0,0,181,183,5,60,0,0,182,180,
		1,0,0,0,183,186,1,0,0,0,184,182,1,0,0,0,184,185,1,0,0,0,185,25,1,0,0,0,
		186,184,1,0,0,0,187,188,5,39,0,0,188,189,5,60,0,0,189,193,5,2,0,0,190,
		192,3,34,17,0,191,190,1,0,0,0,192,195,1,0,0,0,193,191,1,0,0,0,193,194,
		1,0,0,0,194,196,1,0,0,0,195,193,1,0,0,0,196,197,5,3,0,0,197,27,1,0,0,0,
		198,199,5,40,0,0,199,200,5,60,0,0,200,204,5,2,0,0,201,203,3,34,17,0,202,
		201,1,0,0,0,203,206,1,0,0,0,204,202,1,0,0,0,204,205,1,0,0,0,205,207,1,
		0,0,0,206,204,1,0,0,0,207,208,5,3,0,0,208,29,1,0,0,0,209,210,5,41,0,0,
		210,211,5,60,0,0,211,215,5,2,0,0,212,214,3,34,17,0,213,212,1,0,0,0,214,
		217,1,0,0,0,215,213,1,0,0,0,215,216,1,0,0,0,216,218,1,0,0,0,217,215,1,
		0,0,0,218,219,5,3,0,0,219,31,1,0,0,0,220,221,5,42,0,0,221,222,5,60,0,0,
		222,226,5,2,0,0,223,225,3,34,17,0,224,223,1,0,0,0,225,228,1,0,0,0,226,
		224,1,0,0,0,226,227,1,0,0,0,227,229,1,0,0,0,228,226,1,0,0,0,229,230,5,
		3,0,0,230,33,1,0,0,0,231,232,3,0,0,0,232,233,5,4,0,0,233,234,3,56,28,0,
		234,235,5,1,0,0,235,35,1,0,0,0,236,237,5,43,0,0,237,238,5,60,0,0,238,240,
		5,12,0,0,239,241,3,20,10,0,240,239,1,0,0,0,240,241,1,0,0,0,241,242,1,0,
		0,0,242,245,5,13,0,0,243,244,5,15,0,0,244,246,3,16,8,0,245,243,1,0,0,0,
		245,246,1,0,0,0,246,247,1,0,0,0,247,248,3,38,19,0,248,37,1,0,0,0,249,253,
		5,2,0,0,250,252,3,40,20,0,251,250,1,0,0,0,252,255,1,0,0,0,253,251,1,0,
		0,0,253,254,1,0,0,0,254,256,1,0,0,0,255,253,1,0,0,0,256,257,5,3,0,0,257,
		39,1,0,0,0,258,265,3,42,21,0,259,265,3,46,23,0,260,265,3,48,24,0,261,265,
		3,50,25,0,262,265,3,52,26,0,263,265,3,54,27,0,264,258,1,0,0,0,264,259,
		1,0,0,0,264,260,1,0,0,0,264,261,1,0,0,0,264,262,1,0,0,0,264,263,1,0,0,
		0,265,41,1,0,0,0,266,268,5,44,0,0,267,269,5,45,0,0,268,267,1,0,0,0,268,
		269,1,0,0,0,269,270,1,0,0,0,270,271,5,60,0,0,271,272,5,4,0,0,272,275,3,
		16,8,0,273,274,5,16,0,0,274,276,3,56,28,0,275,273,1,0,0,0,275,276,1,0,
		0,0,276,277,1,0,0,0,277,278,5,1,0,0,278,43,1,0,0,0,279,284,3,0,0,0,280,
		281,5,17,0,0,281,283,3,0,0,0,282,280,1,0,0,0,283,286,1,0,0,0,284,282,1,
		0,0,0,284,285,1,0,0,0,285,45,1,0,0,0,286,284,1,0,0,0,287,288,3,44,22,0,
		288,289,7,2,0,0,289,290,3,56,28,0,290,291,5,1,0,0,291,47,1,0,0,0,292,293,
		5,47,0,0,293,294,5,12,0,0,294,295,3,56,28,0,295,296,5,13,0,0,296,299,3,
		38,19,0,297,298,5,48,0,0,298,300,3,38,19,0,299,297,1,0,0,0,299,300,1,0,
		0,0,300,49,1,0,0,0,301,302,5,49,0,0,302,303,5,60,0,0,303,304,5,50,0,0,
		304,305,3,56,28,0,305,306,3,38,19,0,306,51,1,0,0,0,307,308,3,56,28,0,308,
		309,5,1,0,0,309,53,1,0,0,0,310,312,5,46,0,0,311,313,3,56,28,0,312,311,
		1,0,0,0,312,313,1,0,0,0,313,314,1,0,0,0,314,315,5,1,0,0,315,55,1,0,0,0,
		316,317,3,58,29,0,317,57,1,0,0,0,318,319,6,29,-1,0,319,320,3,60,30,0,320,
		326,1,0,0,0,321,322,10,2,0,0,322,323,7,3,0,0,323,325,3,60,30,0,324,321,
		1,0,0,0,325,328,1,0,0,0,326,324,1,0,0,0,326,327,1,0,0,0,327,59,1,0,0,0,
		328,326,1,0,0,0,329,330,6,30,-1,0,330,331,3,62,31,0,331,337,1,0,0,0,332,
		333,10,2,0,0,333,334,7,4,0,0,334,336,3,62,31,0,335,332,1,0,0,0,336,339,
		1,0,0,0,337,335,1,0,0,0,337,338,1,0,0,0,338,61,1,0,0,0,339,337,1,0,0,0,
		340,341,6,31,-1,0,341,342,3,64,32,0,342,348,1,0,0,0,343,344,10,2,0,0,344,
		345,7,5,0,0,345,347,3,64,32,0,346,343,1,0,0,0,347,350,1,0,0,0,348,346,
		1,0,0,0,348,349,1,0,0,0,349,63,1,0,0,0,350,348,1,0,0,0,351,352,5,25,0,
		0,352,357,3,64,32,0,353,354,5,32,0,0,354,357,3,64,32,0,355,357,3,66,33,
		0,356,351,1,0,0,0,356,353,1,0,0,0,356,355,1,0,0,0,357,65,1,0,0,0,358,362,
		3,72,36,0,359,361,3,68,34,0,360,359,1,0,0,0,361,364,1,0,0,0,362,360,1,
		0,0,0,362,363,1,0,0,0,363,67,1,0,0,0,364,362,1,0,0,0,365,366,5,17,0,0,
		366,373,5,60,0,0,367,369,5,12,0,0,368,370,3,70,35,0,369,368,1,0,0,0,369,
		370,1,0,0,0,370,371,1,0,0,0,371,373,5,13,0,0,372,365,1,0,0,0,372,367,1,
		0,0,0,373,69,1,0,0,0,374,379,3,56,28,0,375,376,5,14,0,0,376,378,3,56,28,
		0,377,375,1,0,0,0,378,381,1,0,0,0,379,377,1,0,0,0,379,380,1,0,0,0,380,
		71,1,0,0,0,381,379,1,0,0,0,382,391,3,74,37,0,383,391,5,60,0,0,384,391,
		3,76,38,0,385,391,3,78,39,0,386,387,5,12,0,0,387,388,3,56,28,0,388,389,
		5,13,0,0,389,391,1,0,0,0,390,382,1,0,0,0,390,383,1,0,0,0,390,384,1,0,0,
		0,390,385,1,0,0,0,390,386,1,0,0,0,391,73,1,0,0,0,392,393,7,6,0,0,393,75,
		1,0,0,0,394,403,5,33,0,0,395,400,3,56,28,0,396,397,5,14,0,0,397,399,3,
		56,28,0,398,396,1,0,0,0,399,402,1,0,0,0,400,398,1,0,0,0,400,401,1,0,0,
		0,401,404,1,0,0,0,402,400,1,0,0,0,403,395,1,0,0,0,403,404,1,0,0,0,404,
		405,1,0,0,0,405,406,5,34,0,0,406,77,1,0,0,0,407,408,5,60,0,0,408,417,5,
		2,0,0,409,414,3,80,40,0,410,411,5,14,0,0,411,413,3,80,40,0,412,410,1,0,
		0,0,413,416,1,0,0,0,414,412,1,0,0,0,414,415,1,0,0,0,415,418,1,0,0,0,416,
		414,1,0,0,0,417,409,1,0,0,0,417,418,1,0,0,0,418,419,1,0,0,0,419,420,5,
		3,0,0,420,79,1,0,0,0,421,422,5,60,0,0,422,423,5,4,0,0,423,424,3,56,28,
		0,424,81,1,0,0,0,425,426,5,55,0,0,426,427,5,12,0,0,427,428,3,84,42,0,428,
		429,5,13,0,0,429,430,3,36,18,0,430,83,1,0,0,0,431,432,7,7,0,0,432,85,1,
		0,0,0,37,91,101,107,116,125,133,149,156,162,172,184,193,204,215,226,240,
		245,253,264,268,275,284,299,312,326,337,348,356,362,369,372,379,390,400,
		403,414,417
	};

	public static readonly ATN _ATN =
		new ATNDeserializer().Deserialize(_serializedATN);


}
