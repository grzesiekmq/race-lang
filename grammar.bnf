<program>           ::= <module_list>

<module_list>       ::= <module_list> <module>
                     | /* empty */

<module>            ::= "module" <IDENT> "{" <module_body> "}"

<module_body>       ::= <struct_list> <fn_list> <system_list>

<struct_list>       ::= <struct_list> <struct_decl>
                     | /* empty */

<struct_decl>       ::= "struct" <IDENT> "{" <field_list> "}"

<field_list>        ::= <field_list> <field>
                     | /* empty */

<field>             ::= <IDENT> ":" <type> ";"

<fn_list>           ::= <fn_list> <fn_decl>
                     | /* empty */

<fn_decl>           ::= "fn" <IDENT> "(" <param_list_opt> ")" <block>

<param_list_opt>    ::= <param_list>
                     | /* empty */

<param_list>        ::= <param_list> "," <param>
                     | <param>

<param>             ::= <IDENT> ":" <type>

<system_list>       ::= <system_list> <system_decl>
                     | /* empty */

<system_decl>       ::= "system" <IDENT> "(" <param_list_opt> ")" "query" "{" <query_list> "}" <block>

<query_list>        ::= <query_list> "," <IDENT>
                     | <IDENT>

<block>             ::= "{" <stmt_list> "}"

<stmt_list>         ::= <stmt_list> <statement>
                     | /* empty */

<statement>         ::= <expr_stmt>
                     | <var_decl>
                     | <if_stmt>
                     | <while_stmt>
                     | <for_stmt>
                     | <return_stmt>
                     | <block>

<expr_stmt>         ::= <expr> ";"

<var_decl>          ::= "let" <IDENT> "=" <expr> ";"
                     | "let" "mut" <IDENT> "=" <expr> ";"

<if_stmt>           ::= "if" "(" <expr> ")" <statement> "else" <statement>
                     | "if" "(" <expr> ")" <statement>

<while_stmt>        ::= "while" "(" <expr> ")" <statement>

<for_stmt>          ::= "for" "(" <stmt_list> <expr> ";" <expr> ")" <statement>

<return_stmt>       ::= "return" <expr> ";"

<expr>              ::= <expr> "+" <expr>
                     | <expr> "-" <expr>
                     | <expr> "*" <expr>
                     | <expr> "/" <expr>
                     | <expr> "." <IDENT>    -- member access
                     | "(" <expr> ")"
                     | <literal>
                     | <IDENT>
                     | <fn_call>

<fn_call>           ::= <IDENT> "(" <arg_list_opt> ")"

<arg_list_opt>      ::= <arg_list>
                     | /* empty */

<arg_list>          ::= <arg_list> "," <expr>
                     | <expr>

<literal>           ::= <NUMBER>
                     | <STRING>
                     | <TRUE>
                     | <FALSE>

<type>              ::= "f32"
                     | "f64"
                     | "i32"
                     | "i64"
                     | "bool"
                     | "vec2"
                     | "vec3"
                     | "vec4"
                     | "quat"
                     | "mat4"
                     | "q24.8"
                     | <IDENT>  -- struct or custom type
